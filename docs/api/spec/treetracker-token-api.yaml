openapi: 3.0.0
info:
  title: Treetracker Wallet API
  contact: {}
  version: '1.10.3'
paths:
  /auth:
    post:
      tags:
        - Authentication
      summary: Authenticate account
      description: 'Authenticate the client using wallet name or id and password, and respond with a bearer token'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
      requestBody:
        description: 'Authentication request body'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authRequest'
            examples:
              ById:
                value:
                  wallet: 21af8154-b7f1-48d3-8520-2e376efae45e
                  password: walnut
              ByName:
                value:
                  wallet: wallet1
                  password: walnut
        required: true
      responses:
        '200':
          description: 'Successful authentication response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bearerToken'
        '401':
          description: 'Incorrect password for wallet'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 401
                message: 'Invalid Credentials'
        '404':
          description: 'No wallet found with provided wallet name or id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 404
                message: 'Could not find entity by wallet name: bad_wallet'
        '415':
          $ref: '#/components/responses/UnsupportedMediaTypeError'
        '422':
          description: 'Missing request parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 422
                message: '"wallet" is not allowed to be empty'
      deprecated: false
  /tokens:
    get:
      tags:
        - Token details
      summary: 'Get a list of tokens in the current wallet  or managed wallets'
      description: 'Get a list of for tokens in the current wallet or managed wallets, matching certain parameters'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - name: limit
          in: query
          description: 'Number of items to return'
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: start
          in: query
          description: 'Where does the list start, 1 means start from the beginning of the list'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 1
            example: 10
        - name: wallet
          description: 'Wallet name can be specified if the authenticated wallet manages other wallets. The default is to return tokens matching the authenticated wallet'
          in: query
          schema:
            type: string
            example: wallet1
      responses:
        '200':
          description: 'Returns list of tokens matching the input parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokens'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          description: 'Missing request parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 422
                message: '"limit" is required'
      deprecated: false
  '/tokens/{token_uuid}':
    get:
      tags:
        - Token details
      summary: Get details for one token
      description: 'Get details for one token in the current wallet or managed wallets, matching certain parameters'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - name: token_uuid
          description: 'ID of specific token to retrieve'
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: 496ffa8e-2fa2-488c-98e1-acf9b57c230b
      responses:
        '200':
          description: 'ID of specific token to retrieve'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenItemWithLinks'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: 'No token found matching token_uuid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 404
                message: 'cannot find token by id:a5fee1ec-31dd-4150-aae1-dfe423ee9fc7'
      deprecated: false
  '/tokens/{token_uuid}/transactions':
    get:
      tags:
        - Token details
      summary: 'Get transaction history for a particular token'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - name: token_uuid
          in: path
          description: 'ID of specific token to retrieve the transactions of'
          required: true
          explode: true
          schema:
            type: string
            format: uuid
            example: e3cd6587-ff01-419b-b2c9-44ceed4dc749
        - name: limit
          in: query
          description: Number of items to return
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: start
          in: query
          description: 'Where does the list start, 1 means start from the beginning of the list'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 1
            example: 10
      responses:
        '200':
          description: 'Return list of transactions associated with the token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/historyResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: 'No token found matching token_uuid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 404
                message: 'cannot find token by id:a5fee1ec-31dd-4150-aae1-dfe423ee9fc7'
        '422':
          description: 'Missing or invalid request or query parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 422
                message: '"limit" is required'
      deprecated: false
  /wallets:
    get:
      tags:
        - Managed wallets
      summary: 'Get all wallets managed by the logged in account. This endpoint is also used to get the total number of tokens in a given wallet.  Each wallet also returns all trust relationships for that wallet that have not been deleted.'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - name: limit
          in: query
          description: Number of items to return
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: start
          in: query
          description: 'Where does the list start, 1 means start from the beginning of the list'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 1
            example: 10
        - name: order_by
          in: query
          description: 'Column to order by, only `created_at` is currently supported'
          required: false
          style: form
          explode: true
          schema:
            type: string
            default: 'created_at'
            example: 'created_at'
        - name: order
          in: query
          description: 'Either `asc` or `desc`'
          required: false
          style: form
          explode: true
          schema:
            type: string
            default: 'desc'
            example: 'asc'
        - name: created_at_start_date
          in: query
          description: 'Date to start checking from, ISO date format'
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
            example: '2021-08-09%2020:56:56.999999'
        - name: created_at_end_date
          in: query
          description: 'Date to stop checking at, ISO format'
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
            example: '2021-08-19%2020:56:56.999999'
      responses:
        '200':
          description: 'Returns list of managed wallets'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/walletsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          description: 'Missing or invalid query parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 422
                message: '"limit" is required'
      deprecated: false
    post:
      tags:
        - Managed wallets
      summary: 'Create a new managed wallet'
      description: 'Create a new managed wallet. Requires the manage_account role.'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
      requestBody:
        description: 'Wallet creation request'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountRequest'
            example:
              wallet: sprinter_van_2004
        required: true
      responses:
        '200':
          description: 'A new wallet was created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '415':
          $ref: '#/components/responses/UnsupportedMediaTypeError'
        '422':
          description: 'Missing or invalid parameters in request body'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 422
                message: '"wallet" is not allowed to be empty'
      deprecated: false
  '/wallets/{wallet_uuid}/trust_relationships':
    get:
      tags:
        - Managed wallets
      summary: Get list of trust relationships for the specified wallet
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - name: wallet_uuid
          description: 'ID of wallet'
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: 496ffa8e-2fa2-488c-98e1-acf9b57c230b
      responses:
        '200':
          description: 'Return list of trust relationships for the wallet matching wallet_uuid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trustRelationshipsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: 'No wallet found matching wallet_uuid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 404
                message: 'Could not find wallet by id: ef6a37ce-c459-4a2c-83c3-85e829e4a753'
      deprecated: false
  /wallets/batch-create-wallet:
    post:
      tags:
        - Managed wallets
      summary: 'Batch Create Wallets'
      description: 'Create multiple wallets using a CSV file.'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeMultipartHeader'
      requestBody:
        description: 'Wallet batch create request'
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/batchCreateRequest'
            encoding:
              csv:
                contentType: text/csv
        required: true
      responses:
        '200':
          description: 'Batch create response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batchCreateResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '415':
          $ref: '#/components/responses/MultipartMediaTypeError'
        '422':
          description: 'Missing or invalid parameters in request body'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 422
                message: '"sender_wallet" is not allowed to be empty'
      deprecated: false
  /wallets/batch-transfer:
    post:
      tags:
        - Managed wallets
      summary: 'Batch transfer'
      description: 'Create multiple transfers using a CSV file.'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeMultipartHeader'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/batchTransferRequest'
            encoding:
              csv:
                contentType: text/csv
      responses:
        '200':
          description: 'Successful batch transfer response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'batch transfer successfull'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '415':
          $ref: '#/components/responses/MultipartMediaTypeError'
        '422':
          description: 'Missing or invalid parameters in request body'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 422
                message: '"sender_wallet" is required'
      deprecated: false
  /transfers:
    post:
      tags:
        - Transfers
      summary: 'Move, request, and send tokens between wallets'
      description: 'Move, request, and send tokens between wallets (by name or id) as allowed by trust relationships.  Transfer can be created/requested either using an explicit list of token ids or by specifying a bundle of tokens using tags and a count of tokens to attempt to transfer.  The originator of the request (currently logged in wallet) is used by the server code to compute who the originating wallet is for this request, whether the request is a credit, debut, or managed transfer, and if appropriate trust relationships exist to automatically execute or if it must be stored as a request until approval'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
      requestBody:
        description: 'Request body for creating a transfer'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transferRequest'
        required: true
      responses:
        '201':
          description: The transfer was completely processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transferItem'
        '202':
          $ref: '#/components/responses/transferPendingResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: 'No wallet found matching input ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 404
                message: 'Could not find wallet by name: bad_wallet'
        '415':
          $ref: '#/components/responses/UnsupportedMediaTypeError'
        '422':
          description: 'Missing or invalid parameters in request body'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 422
                message: '"receiver_wallet" is not allowed to be empty'
    get:
      tags:
        - Transfers
      summary: 'Get requested, pending, completed, cancelled, and failed transfers'
      description: 'Get requested, pending, completed, cancelled and failed transfers for wallets (by name or id). The authenticated wallet is either the source, destination, or originating wallet entity.'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - in: query
          name: state
          schema:
            $ref: '#/components/schemas/transferState'
          required: false
          description: 'requested, pending, completed, cancelled, failed'
        - in: query
          name: wallet
          schema:
            $ref: '#/components/schemas/walletNameOrId'
          required: false
          description: 'filter transfers matches the source, destination, or originating wallet (by name or id) of a transfer'
        - name: limit
          in: query
          description: Number of items to return
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: start
          in: query
          description: 'Where does the list start, 1 means start from the beginning of the list'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 1
            example: 10
      responses:
        '200':
          description: Return array of matching transfers
          content:
            application/json:
              schema:
                type: object
                properties:
                  transfers:
                    type: array
                    items:
                      $ref: '#/components/schemas/transferItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          description: 'Missing or invalid parameters in request body'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 422
                message: '"limit" is required'
  '/transfers/{transfer_id}':
    get:
      tags:
        - Transfers
      summary: Get information of a single transfer
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
        - name: transfer_id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: ''
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Transfers
      summary: Cancel a pending or requested transfer that has not closed
      description: Cancel a pending (untrusted) or requested transfer.  The executor can delete the pending/requested transfer before it is executed.  Transfer is marked canceled by this command.
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
        - name: transfer_id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Transfer was marked canceled
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Authenticated wallet does not have access to this transfer
        '404':
          description: No transfer record with that id
        '406':
          description: Transfer with this id is not in requested or pending state
  '/transfers/{transfer_id}/accept':
    post:
      tags:
        - Transfers
      summary: Accept a pending (untrusted) transfer
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
        - name: transfer_id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: ''
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/transfers/{transfer_id}/decline':
    post:
      tags:
        - Transfers
      summary: Decline a pending (untrusted) transfer
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
        - name: transfer_id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: ''
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/transfers/{transfer_id}/fulfill':
    parameters:
      - $ref: '#/components/parameters/treetrackerApiKeyParam'
      - $ref: '#/components/parameters/contentTypeJsonHeader'
    post:
      tags:
        - Transfers
      summary: Fullfill a requested transfer
      description: Post a list of tokens to fulfill the parameters of a transfer request that specifies tokens using a bundle.  This allows the debited wallet to decide which tokens matching the bundle parameters to attach to the transfer.  Application logic must check that each token matches the parameters of the request.
      parameters:
        - name: transfer_id
          in: path
          description: the id of the transfer record on the server
          required: true
          style: simple
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestBundleFulfillBody'
      responses:
        '200':
          description: ''
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/transfers/{transfer_id}/tokens':
    get:
      tags:
        - Transfers
      summary: Get all tokens linked to a single transfer
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
        - name: transfer_id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of items to return
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: start
          in: query
          description: 'Where does the list start, 1 means start from the beginning of the list'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 1
            example: 10
      responses:
        '200':
          description: ''
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /events:
    get:
      tags:
        - Event stream
      summary: Get event stream for wallet
      description: 'The event stream contains notifications about execute and pending transfers, transfer request, trust requests, trust deletions, and trust approvals.  Event streams for managed wallets can also be requested'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
        - name: limit
          in: query
          description: The number of records to return
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: since
          in: query
          description: Only return events since a given timestamp
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: timestamp
            example: '2019-10-12T07:20:50.52Z'
        - name: wallet
          description: Wallet (by name or id) can be specified if the authenticated wallet manages other wallets.  The default is to return events matching the authenticated wallet
          in: query
          schema:
            oneOf:
              - type: string
              - type: number
            example: zaven2
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventStream'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /trust_relationships:
    get:
      tags:
        - Trust relationships
      summary: 'Get a list of existing, requested, and pending trust relationships'
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
        - name: limit
          in: query
          description: Number of items to return
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: start
          in: query
          description: 'Where does the list start, 1 means start from the beginning of the list'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 1
            example: 10
        - name: state
          in: query
          description: Filter by state of the trust relationship
          required: false
          style: form
          schema:
            type: string
          examples:
            Trusted:
              value: trusted
              description: Active trust relationship
            Requested:
              value: requested
              description: Trust relationship pending approval
            CancelledByOriginator:
              value: cancelled_by_originator
              description: Trust relationship was cancelled by the originator
            CancelledByActor:
              value: cancelled_by_actor
              description: Trust relationship was cancelled by the actor
            CancelledByTarget:
              value: cancelled_by_target
              description: Trust relationship was cancelled by the target
        - name: type
          in: query
          description: Type of trust relationship
          required: false
          style: form
          schema:
            type: string
          examples:
            Send:
              value: send
              description: Allow actor to send to target
            Deduct:
              value: deduct
              description: Allow actor to deduct from wallet
            Manage:
              value: manage
              description: Allow actor to move funds from target wallet to any other wallet they control
        - name: request_type
          in: query
          description: Type of trust relationship
          required: false
          style: form
          schema:
            type: string
          examples:
            Send:
              value: send
              description: Request to allow actor to send to target
            Receive:
              value: receive
              description: Request a send priviledge to a wallet controlled by the originator on behalf of another sending wallet (opposite direction of send trust request)
            Deduct:
              value: deduct
              description: Request to allow actor to deduct from wallet
            Release:
              value: release
              description: Request a deduct priviledge from a wallet controlled by the originator on behalf of another deducting wallet  (opposite direction of deduct trust request)
            Manage:
              value: manage
              description: Request to allow actor to move funds from target wallet to any other wallet they control
            Yield:
              value: manage
              description: Request to give manage privilege on a wallet controlled by the originator to another wallet (opposite direction of manage trust request)
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trustRelationshipsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Trust relationships
      summary: Request a new trust relationship from another wallet
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trustRequest'
      responses:
        '202':
          description: Accepted but waiting for approval
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  '/trust_relationships/{trust_relationship_id}':
    delete:
      tags:
        - Trust relationships
      summary: Remove a trust relationship linked to the autheticated wallet
      description: Remove a trust relationship linked to the autheticated wallet.  This could be either the actor wallet or the target wallet
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
        - name: trust_relationship_id
          in: path
          description: the id of the entity trust record on the server
          required: true
          style: simple
          schema:
            type: integer
      responses:
        '200':
          description: ''
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/trust_relationships/{trust_relationship_id}/accept':
    post:
      tags:
        - Trust relationships
      summary: Accept a trust relationship
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
        - name: trust_relationship_id
          in: path
          description: the id of the entity trust record on the server
          required: true
          style: simple
          schema:
            type: integer
      responses:
        '200':
          description: ''
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  '/trust_relationships/{trust_relationship_id}/decline':
    post:
      tags:
        - Trust relationships
      summary: Decline a trust relationship
      parameters:
        - $ref: '#/components/parameters/treetrackerApiKeyParam'
        - $ref: '#/components/parameters/contentTypeJsonHeader'
        - name: trust_relationship_id
          in: path
          description: the id of the entity trust record on the server
          required: true
          style: simple
          schema:
            type: integer
      responses:
        '200':
          description: ''
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
components:
  parameters:
    treetrackerApiKeyParam:
      name: TREETRACKER-API-KEY
      in: header
      description: ''
      required: true
      style: simple
      schema:
        type: string
    contentTypeJsonHeader:
      name: Content-Type
      in: header
      description: ''
      required: true
      style: simple
      schema:
        type: string
        example: application/json
    contentTypeMultipartHeader:
      name: Content-Type
      in: header
      description: ''
      required: true
      style: simple
      schema:
        type: string
        example: multipart/form-data
  schemas:
    authRequest:
      title: Authentication Request
      required:
        - wallet
        - password
      type: object
      properties:
        wallet:
          oneOf:
            - type: string
              example: wallet1
            - type: string
              format: uuid
              example: 21af8154-b7f1-48d3-8520-2e376efae45e
        password:
          type: string
          example: walnut
    bearerToken:
      title: Successful Authentication Response
      type: object
      properties:
        bearer:
          type: string
          example:
            bearer: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    tokens:
      title: Token query response
      type: object
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/tokenItem'
    tokenItem:
      title: Token
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'ca1a99c3-9797-465d-8ee3-8dbd26a08faa'
        capture_id:
          type: string
          format: uuid
          example: '8df635f6-2df8-496f-93da-3060fc1e3180'
        wallet_id:
          type: string
          format: uuid
          example: 'c63da6b3-d7a3-444a-9ff0-10644036eccd'
        transfer_pending:
          type: boolean
          example: false
        transfer_pending_id:
          type: string
          format: uuid
          example: null
        created_at:
          type: string
          format: date-time
          example: '2021-07-02T18:31:07.208Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-07-02T18:31:07.208Z'
        claim:
          type: boolean
          example: false
    tokenItemWithLinks:
      title: Single Token Item
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'ca1a99c3-9797-465d-8ee3-8dbd26a08faa'
        capture_id:
          type: string
          format: uuid
          example: '8df635f6-2df8-496f-93da-3060fc1e3180'
        wallet_id:
          type: string
          format: uuid
          example: 'c63da6b3-d7a3-444a-9ff0-10644036eccd'
        transfer_pending:
          type: boolean
          example: false
        transfer_pending_id:
          type: string
          format: uuid
          example: null
        created_at:
          type: string
          format: date-time
          example: '2021-07-02T18:31:07.208Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-07-02T18:31:07.208Z'
        claim:
          type: boolean
          example: false
        links:
          type: object
          properties:
            capture:
              type: string
              example: '/webmap/tree?uuid=8df635f6-2df8-496f-93da-3060fc1e3180'
    accountRequest:
      title: accountRequest
      required:
        - wallet
      type: object
      properties:
        wallet:
          type: string
      example:
        wallet: sprinter_van_2004
    walletsResponse:
      title: Wallets Response
      properties:
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/walletItem'
    walletItem:
      title: Wallet Details
      properties:
        id:
          type: string
          format: uuid
          example: 'ef6a37ce-c459-4a2c-83c3-85e829e4a75e'
        logo_url:
          type: string
          format: url
          example: https://www.placehold.co/192x192
        about:
          type: string
          example: 'feugiat pretium nibh ipsum consequat nisl vel pretium lectus quam id leo in vitae turpis massa sed elementum tempus egestas'
        wallet:
          type: string
          example: testwallet
        tokens_in_wallet:
          type: integer
          example: 12
    transferRequest:
      title: Transfer Request
      oneOf:
        - properties:
            tokens:
              type: array
              items:
                type: string
                format: uuid
              description: 'Explicitly transfer tokens'
            sender_wallet:
              oneOf:
                - type: string
                - type: string
                  format: uuid
            receiver_wallet:
              oneOf:
                - type: string
                - type: string
                  format: uuid
          required:
            - tokens
            - sender_wallet
            - receiver_wallet
          example:
            tokens:
              - e1b278e8-f025-44b7-9dd8-36ffb2d58f7e
              - e533653e-2dbf-48cd-940a-a87e5a393158
            sender_wallet: wallet1
            receiver_wallet: wallet2
        - properties:
            bundle:
              type: object
              description: 'Transfer some amount of token'
              properties:
                bundle_size:
                  type: integer
                  description: required number of trees to transfer
            sender_wallet:
              oneOf:
                - type: string
                - type: string
                  format: uuid
            receiver_wallet:
              oneOf:
                - type: string
                - type: string
                  format: uuid
          required:
            - bundle
            - sender_wallet
            - receiver_wallet
          example:
            bundle:
              bundle_size: 100
            sender_wallet: wallet1
            receiver_wallet: wallet2
    transferbundlerequest:
      title: transferbundlerequest
      required:
        - parameters
        - sender_wallet
        - receiver_wallet
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/requestBundleRequestParameters'
        sender_wallet:
          oneOf:
            - type: string
            - type: number
        receiver_wallet:
          oneOf:
            - type: string
            - type: number
      example:
        bundle_size: 500
        sender_wallet: zaven
        receiver_wallet: GreenEarthAppeal
    transferItem:
      title: Transfer Details
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique ID for this transfer'
          example: cf0ce129-8c12-45cf-b914-a8f1cb6b7dc5
        type:
          $ref: '#/components/schemas/transferType'
        parameters:
          type: object
          oneOf:
            - properties:
                bundle:
                  type: object
                  properties:
                    bundleSize:
                      type: integer
                      description: Number of tokens associated with the transfer
                      example: 2
                  required:
                    - bundleSize
            - properties:
                tokens:
                  type: array
                  items:
                    type: string
                  description: Array of explicit tokens
        state:
          $ref: '#/components/schemas/transferState'
        created_at:
          type: string
          format: date-time
          example: 2023-08-02T21:46:35.134Z
        closed_at:
          type: string
          format: date-time
          example: 2023-08-02T21:46:35.134Z
        active:
          type: boolean
          example: true
        claim:
          type: boolean
          example: false
        originating_wallet:
          type: string
          example: testuser
        source_wallet:
          type: string
          example: testuser
        destination_wallet:
          type: string
          example: wallet22
    transferType:
      type: string
      enum:
        - send
        - deduct
        - managed
      example: send
      description: 'The type of transfer. The value is computed by the server based on the submitted request'
    sendrequest:
      title: sendrequest
      required:
        - tokens
        - receiver_wallet
      type: object
      properties:
        tokens:
          type: array
          items:
            type: string
          description: ''
        receiver_wallet:
          oneOf:
            - type: string
            - type: number
      example:
        tokens:
          - e1b278e8-f025-44b7-9dd8-36ffb2d58f7e
          - e533653e-2dbf-48cd-940a-a87e5a393158
        receiver_wallet: zaven
    sendBundleRequest:
      title: sendBundleRequest
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/requestBundleRequestParameters'
        receiver_wallet:
          type: string
      required:
        - bundle_size
        - receiver_wallet
    pendingTransfersResponse:
      title: List of Pending Transfers
      type: object
      properties:
        pending:
          type: array
          items:
            $ref: '#/components/schemas/pendingTransferItem'
    pendingTransferItem:
      title: Pending Transfer Item
      type: object
      properties:
        id:
          type: integer
        sender_wallet:
          type: string
        receiver_wallet:
          type: string
        created_at:
          type: string
    requestBundleRequest:
      title: requestBundleRequest
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/requestBundleRequestParameters'
        sender_wallet:
          type: string
          description: Senders other than the wallet requesting the transfer are not allowed at this time
        receiver_wallet:
          type: string
      required:
        - params
        - receiver_wallet
    requestBundleRequestParameters:
      title: Parameters for Transfer Request
      type: object
      properties:
        tokens:
          type: array
          items:
            type: string
          description: optional array of explicit tokens
        bundle_size:
          type: integer
          description: required number of trees to transfer
        matching_all_tags:
          type: array
          items:
            type: string
          description: optional list of tags that trees must match ALL of
      required:
        - bundle_size
    requestBundleFulfillBody:
      title: Transfer Request Fulfillment
      type: object
      properties:
        tokens:
          type: array
          items:
            type: string
          description: optional array of explicit tokens
        implicit:
          type: boolean
          description: automatically fill the request with tokens matching the specified parameters if set
    trustRequest:
      title: Trust Request
      type: object
      properties:
        trust_request_type:
          type: string
        requester_wallet:
          type: string
          description: 'This is optional, if ignore it, then the default requester_wallet should be the current logged in wallet'
        requestee_wallet:
          type: string
          description: The wallet to who this request are targetting
    historyResponse:
      title: History Response
      type: object
      properties:
        history:
          type: array
          items:
            $ref: '#/components/schemas/historyItem'
    historyItem:
      title: History Item
      type: object
      properties:
        token:
          type: string
          format: uuid
        sender_wallet:
          type: string
        receiver_wallet:
          type: string
        processed_at:
          type: string
          format: date-time
      example:
        token: e3cd6587-ff01-419b-b2c9-44ceed4dc749
        sender_wallet: zaven
        receiver_wallet: zaven2
        processed_at: '2020-01-17T22:32:43.008Z'
    eventStream:
      title: Event Stream
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/eventItem'
    eventItem:
      title: Event Item
      type: object
      properties:
        type:
          type: string
        wallet:
          type: string
        transfer_id:
          type: integer
        trust_relationship_id:
          type: integer
        created_at:
          type: string
    trustRelationshipsResponse:
      title: Trust Relationships Response
      type: object
      properties:
        trust_relationships:
          type: array
          items:
            $ref: '#/components/schemas/trustRelationshipItem'
    trustRelationshipItem:
      title: Trust Relationship Item
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 0b335cd4-db82-4784-89f5-c8800844c291
        type:
          $ref: '#/components/schemas/trustType'
        request_type:
          $ref: '#/components/schemas/trustRequestType'
        state:
          $ref: '#/components/schemas/trustStateType'
        created_at:
          type: string
          format: date-time
          example: 2023-08-15T23:29:12.261Z
        updated_at:
          type: string
          format: date-time
          example: 2023-08-15T23:29:12.261Z
        originating_wallet:
          type: string
          example: testuser
        actor_wallet:
          type: string
          example: testuser
        target_wallet:
          type: string
          example: otherwallet
    walletNameOrId:
      oneOf:
        - type: string
          example: wallet1
        - type: string
          format: uuid
          example: bc7d4c0d-1ea5-4ead-9fef-b726a34c2d74
    errorResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    trustStateType:
      type: string
      enum:
        - requested
        - cancelled_by_originator
        - cancelled_by_actor
        - cancelled_by_target
        - trusted
      example: trusted
      description: >
        Trust state type:
         * `requested` - The trust relationship is pending approval.
         * `cancelled_by_originator` - The trust relationship was cancelled by the originator.
         * `cancelled_by_actor` - The trust relationship was cancelled by the actor.
         * `cancelled_by_target` - The trust relationship was cancelled by the target.
         * `trusted` - The trust relationship is active.
    trustRequestType:
      type: string
      enum:
        - send
        - receive
        - manage
        - yield
        - deduct
        - release
      example: manage
      description: >
        Trust Request type:
          * `send` - Request to allow actor to send to target.
          * `receive` - Request a send privilege to a wallet controlled by the originator on behalf of another sending wallet (opposite direction of send trust request).
          * `manage` - Request to allow actor to move funds from target wallet to any other wallet they control.
          * `yield` - Request to give manage privilege on a wallet controlled by the originator to another wallet (opposite direction of manage trust request).
          * `deduct` - Request to allow actor to deduct from wallet.
          * `release` - Request a deduct privilege from a wallet controlled by the originator on behalf of another deducting wallet (opposite direction of deduct trust request).
    trustType:
      type: string
      enum:
        - send
        - deduct
        - manage
      example: send
      description: >
        Trust Type:
         * `send` - Allow actor to send to target.
         * `deduct` - Allow actor to deduct from wallet.
         * `manage` - Allow actor to move funds from target wallet to any other wallet they control.
    transferState:
      type: string
      enum:
        - requested
        - pending
        - completed
        - cancelled
        - failed
      example: pending
    batchCreateRequest:
      title: 'Batch create request'
      required:
        - csv
      type: object
      properties:
        sender_wallet:
          type: string
          example: wallet1
        token_transfer_amount_default:
          type: integer
          example: 5
        csv:
          type: string
          format: binary
          description: 'Must be a `.csv` file'
    batchCreateResponse:
      title: 'Batch create response'
      type: object
      properties:
        wallets_created:
          type: integer
        wallets_already_exists:
          type: array
          items:
            type: string
        wallet_other_failure_count:
          type: integer
        extra_wallet_information_saved:
          type: integer
        extraWalletInformationNotSaved:
          type: array
          items:
            type: string
      example:
        wallets_created: 3
        wallets_already_exists: [ ]
        wallet_other_failure_count: 0
        extra_wallet_information_saved: 0
        extraWalletInformationNotSaved: [ ]
    batchTransferRequest:
      title: 'Batch transfer request'
      required:
        - csv
        - sender_wallet
      type: object
      properties:
        sender_wallet:
          type: string
          example: wallet1
        token_transfer_amount_default:
          type: integer
          example: 5
        csv:
          type: string
          format: binary
          description: 'Must be a `.csv` file'
  responses:
    UnauthorizedError:
      description: 'API key is missing or invalid, or some permission is missing.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
          example:
            code: 401
            message: 'Invalid access - no API key'
    ForbiddenError:
      description: 'Access bearer token is missing or invalid, or some permission is missing, etc.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
          example:
            code: 403
            message: 'ERROR: Authentication, no token supplied for protected path'
    UnsupportedMediaTypeError:
      description: Invalid content type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
          example:
            code: 415
            message: 'Invalid content type. API only supports application/json'
    MultipartMediaTypeError:
      description: Invalid content type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
          example:
            code: 415
            message: 'Invalid content type. API only supports multipart/form-data'
    transferPendingResponse:
      description: 'The transfer could not be completely processed because a trust relationship does not exist allowing for automated processing.  If a the source wallet is controlled by the authenticated user, a transfer in the pending state has been created. If the source wallet is not controlled but the authenticated user, but the destination wallet is, then a transfer in the requested state has been created'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transferItem'
          example:
            id: 251debc2-9077-4876-b710-f5543c9a7719
            type: send
            parameters:
              bundle:
                bundleSize: 1
            state: pending
            created_at: '2023-08-31T05:02:52.623Z'
            closed_at: '2023-08-31T05:02:52.623Z'
            active: true
            claim: false
            originating_wallet: testuser
            source_wallet: wallet1
            destination_wallet: wallet2
  securitySchemes:
    httpBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - httpBearer: []
